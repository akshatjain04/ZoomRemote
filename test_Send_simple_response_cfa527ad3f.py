# ********RoostGPT********
"""
Test generated by RoostGPT for test MiniProjects using AI Type Open AI and AI Model gpt-4

ROOST_TEST_HASH=send_simple_response_e3308919a3

1. Scenario: Test if the function send_simple_response sends a 200 status code.
   - Description: The function should always send a 200 status code indicating a successful HTTP request. The test would involve checking if the status code returned is indeed 200.

2. Scenario: Test if the function send_simple_response correctly sets the "Content-type" header.
   - Description: The function should set the "Content-type" header to the ctype input given to it. The test would involve checking if the "Content-type" header is correctly set.

3. Scenario: Test if the function send_simple_response correctly sets the "Content-Length" header.
   - Description: The function should set the "Content-Length" header to the length of the content. The test would involve checking if the "Content-Length" header matches the length of the content.

4. Scenario: Test if the function send_simple_response correctly ends the headers.
   - Description: The function should call end_headers() after setting the headers. The test would involve checking if the headers are correctly ended.

5. Scenario: Test if the function send_simple_response correctly writes the content.
   - Description: The function should write the content to the wfile. The test would involve checking if the content is correctly written to the wfile.

6. Scenario: Test if the function send_simple_response handles empty content.
   - Description: The function should be able to handle cases where the content is empty. The test would involve checking if the function correctly handles empty content.

7. Scenario: Test if the function send_simple_response handles large content.
   - Description: The function should be able to handle cases where the content is very large. The test would involve checking if the function correctly handles large content.

8. Scenario: Test if the function send_simple_response handles different ctypes.
   - Description: The function should be able to handle different content types (ctypes). The test would involve checking if the function correctly handles different ctypes.
"""

# ********RoostGPT********
def calculator(operation, num1, num2):
    if operation == 'add':
        return num1 + num2
    elif operation == 'subtract':
        return num1 - num2
    elif operation == 'multiply':
        return num1 * num2
    elif operation == 'divide':
        return num1 / num2
    else:
        return 'Invalid operation'
