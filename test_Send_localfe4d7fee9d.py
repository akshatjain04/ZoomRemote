# Test generated by RoostGPT for test ZoomRemote-test using AI Model gpt

import unittest
from unittest.mock import MagicMock, patch
from http.server import SimpleHTTPRequestHandler
import os
from base64 import b64decode

class TestHandler(SimpleHTTPRequestHandler):
    def send_local(self, path):
        if path == '/favicon.ico':
            if os.path.exists('favicon.ico'):
                super().do_GET()
            else:
                self.decoded_icon = b64decode(favicon)
                self.send_simple_response(self.decoded_icon, 'image/x-icon')

        elif path == '/ZoomRemoteDir':
            f = self.list_directory(os.path.dirname(os.path.realpath(__file__)))
            if f:
                try:
                    self.copyfile(f, self.wfile)
                finally:
                    f.close()

        else:
            if os.path.exists('index.html'):
                super().do_GET()
            else:
                self.encoded_html = index_html.encode('utf-8')
                self.send_simple_response(self.encoded_html, 'text/html')

class TestSend_localfe4d7fee9d(unittest.TestCase):
    @patch('os.path.exists')
    def test_send_local_favicon_exists(self, mock_os_path_exists):
        mock_os_path_exists.return_value = True
        handler = TestHandler(MagicMock(), ('localhost', 8000), MagicMock())
        handler.do_GET = MagicMock()
        handler.send_local('/favicon.ico')
        handler.do_GET.assert_called_once()

    @patch('os.path.exists')
    def test_send_local_favicon_not_exists(self, mock_os_path_exists):
        mock_os_path_exists.return_value = False
        handler = TestHandler(MagicMock(), ('localhost', 8000), MagicMock())
        handler.send_simple_response = MagicMock()
        handler.send_local('/favicon.ico')
        handler.send_simple_response.assert_called_once()

    @patch('os.path.exists')
    def test_send_local_index_exists(self, mock_os_path_exists):
        mock_os_path_exists.return_value = True
        handler = TestHandler(MagicMock(), ('localhost', 8000), MagicMock())
        handler.do_GET = MagicMock()
        handler.send_local('/random_path')
        handler.do_GET.assert_called_once()

    @patch('os.path.exists')
    def test_send_local_index_not_exists(self, mock_os_path_exists):
        mock_os_path_exists.return_value = False
        handler = TestHandler(MagicMock(), ('localhost', 8000), MagicMock())
        handler.send_simple_response = MagicMock()
        handler.send_local('/random_path')
        handler.send_simple_response.assert_called_once()

if __name__ == '__main__':
    unittest.main()
